var_sources:
  - name: vault
    type: vault
    config:
      url: https://vault.sdp.refinitiv.com 
      client_token: ((auth-token))
      shared_path: shared

  - name: vault-kv
    type: dummy
    config:
      vars:
        secret: ((vault:kv/secret))

  - name: vault-aws
    type: dummy
    config:
      vars:
        aws: ((vault:aws/sts/653551970210-a250395-developer))

resource_types:
- name: merge-request
  type: docker-image
  source:
    repository: samcontesse/gitlab-merge-request-resource

- name: artifactory
  type: docker-image
  source:
    repository: springio/artifactory-resource
    tag: 0.0.14

resources:
- name: gitlab-develop
  type: git
  icon: gitlab
  source:
    uri: ssh://git@((GIT_REPO))
    branch: ((GIT_DEV))
    private_key: ((vault-kv:secret.rsa_key))

- name: gitlab-mr
  type: merge-request
  icon: gitlab
  source:
    uri: https://((GIT_REPO))
    private_token: ((vault-kv:secret.git_token))

- name: bams
  type: artifactory
  icon: source-repository
  source:
    uri: ((BAMS_URL))
    username: ((vault-kv:secret.bams_user))
    password: ((vault-kv:secret.bams_pass))
    build_name: ((BAMS_METEDATA_BUILDNAME))

- name: docker-hub
  type: docker-image
  icon: docker
  source:
    username: ((vault-kv:secret.dockerhub_user))
    password: ((vault-kv:secret.dockerhub_pass))
    repository: dockerhub135/test

jobs:


- name: sonarqube-develop
  plan:
  - get: repo
    resource: gitlab-develop
    trigger: true
  - get: docker-hub
  - task: sonarqube
    image: docker-hub
    file: repo/ci/tasks/sonarqube.yml
    input_mapping: {input: repo}
    params:
      BAMS_USER: ((vault-kv:secret.bams_user))
      BAMS_PASS: ((vault-kv:secret.bams_pass))
      SONAR_PROJECT_KEY: ((SONARQUBE_PROJECT_KEY))
      SONAR_TOKEN: ((vault-kv:secret.sonarqube_token))


- name: unit-tests-develop
  plan:
  - get: repo
    resource: gitlab-develop
    trigger: true
    passed: [sonarqube-develop]
  - get: docker-hub
  - task: unit-tests
    image: docker-hub
    file: repo/ci/tasks/unit-tests.yml
    input_mapping: {input: repo}
    params:
      BAMS_USER: ((vault-kv:secret.bams_user))
      BAMS_PASS: ((vault-kv:secret.bams_pass))


- name: build-develop
  plan:
  - get: repo
    resource: gitlab-develop
    trigger: true
    passed: [unit-tests-develop]
  - get: docker-hub
  - task: build
    image: docker-hub
    file: repo/ci/tasks/build.yml
    input_mapping: {input: repo}
    output_mapping: {output: build}
    params:
      GIT_BRANCH: ((GIT_DEV))
      GIT_SSHKEY: ((vault-kv:secret.rsa_key))
      PROJECT_DIR: ((PROJECT_DIR))
      BAMS_DIR: ((BAMS_DIR))
      BAMS_USER: ((vault-kv:secret.bams_user))
      BAMS_PASS: ((vault-kv:secret.bams_pass))
      ARTIFACT_NAME: ((ARTIFACT_NAME))
  - put: bams
    params:
      repo: ((BAMS_PATH))/((BAMS_DIR))
      folder: build/((BAMS_DIR))
      disable_checksum_uploads: true
      module_layout: none


- name: setup-deploy-develop
  plan:
  - get: repo
    resource: gitlab-develop
    trigger: true
    passed: [build-develop]
  - task: set-pipeline
    file: repo/ci/tasks/deploy-pipeline.yml
    input_mapping: {input: repo}
    output_mapping: {output: updated}
    params:
      GIT_SSHKEY: ((vault-kv:secret.rsa_key))
  - set_pipeline: ((DEPLOY_PIPELINE))
    file: updated/pipeline-deploy.yml
    var_files:
      - updated/config.yml


- name: sonarqube-snapshot
  plan:
  - get: repo
    resource: gitlab-mr
    trigger: true
  - get: docker-hub
  - put: gitlab-mr
    params:
      repository: repo
      status: running
  - task: sonarqube
    image: docker-hub
    file: repo/ci/tasks/sonarqube.yml
    input_mapping: {input: repo}
    params:
      BAMS_USER: ((vault-kv:secret.bams_user))
      BAMS_PASS: ((vault-kv:secret.bams_pass))
      SONAR_PROJECT_KEY: ((SONARQUBE_PROJECT_KEY))
      SONAR_TOKEN: ((vault-kv:secret.sonarqube_token))
  on_failure:
    put: gitlab-mr
    params:
      repository: repo
      status: faile

- name: unit-tests-snapshot
  plan:
  - get: repo
    resource: gitlab-mr
    trigger: true
    passed: [sonarqube-snapshot]
  - get: docker-hub
  - task: unit-tests
    image: docker-hub
    file: repo/ci/tasks/unit-tests.yml
    input_mapping: {input: repo}
    params:
      BAMS_USER: ((vault-kv:secret.bams_user))
      BAMS_PASS: ((vault-kv:secret.bams_pass))
  on_failure:
    put: gitlab-mr
    params:
      repository: repo
      status: faile


- name: build-snapshot
  plan:
  - get: repo
    resource: gitlab-mr
    trigger: true
    passed: [unit-tests-snapshot]
  - get: docker-hub
  - task: build
    image: docker-hub
    file: repo/ci/tasks/build.yml
    input_mapping: {input: repo}
    output_mapping: {output: build}
    params:
      GIT_BRANCH: ((GIT_DEV))
      GIT_SSHKEY: ((vault-kv:secret.rsa_key))
      PROJECT_DIR: ((PROJECT_DIR))
      BAMS_DIR: ((BAMS_DIR))
      BAMS_USER: ((vault-kv:secret.bams_user))
      BAMS_PASS: ((vault-kv:secret.bams_pass))
      ARTIFACT_NAME: ((ARTIFACT_NAME))
  - put: bams
    params:
      repo: ((BAMS_PATH))/((BAMS_DIR))
      folder: build/((BAMS_DIR))
      disable_checksum_uploads: true
      module_layout: none
  on_failure:
    put: gitlab-mr
    params:
      repository: repo
      status: faile


- name: setup-deploy-snapshot
  plan:
  - get: repo-mr
    resource: gitlab-mr
    trigger: true
    passed: [build-snapshot]
  - get: repo
    resource: gitlab-develop
  - task: set-pipeline
    file: repo/ci/tasks/deploy-pipeline.yml
    input_mapping: {input: repo}
    output_mapping: {output: updated}
    params:
      GIT_SSHKEY: ((vault-kv:secret.rsa_key))
  - set_pipeline: ((DEPLOY_PIPELINE))
    file: updated/pipeline-deploy.yml
    var_files:
      - updated/config.yml
  on_failure:
    put: gitlab-mr
    params:
      repository: repo
      status: failed
  on_success:
    put: gitlab-mr
    params:
      repository: repo-mr
      status: success
