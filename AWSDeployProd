pipeline{
	agent { label 'aaa-jenkins2' }
    environment {
        BAMS_CREDS = credentials('a5e809ef-6598-4f88-a765-88b4b3387cc5')
    }
    stages{
        stage("Download Build from BAMS"){
            steps{
                script{
                    env.VERSIONNUMBER = env.BUILD_TAG.split('/')[1]
                }
				sh "mkdir ${env.DIRECTORY}"
                sh "mkdir ${env.DIRECTORY}\\terraform"
                rtServer id: 'BAMS', url: 'https://bams-aws.refinitiv.com/artifactory', username: BAMS_CREDS_USR, password: BAMS_CREDS_PSW
                rtDownload(
                    serverId: 'BAMS',
                    spec:
                        """{
                                "files": [
                                    {
                                        "pattern": "${env.BAMS_DIRECTORY}-${env.VERSIONNUMBER}/${env.BAMS_PACKAGE}-${env.VERSIONNUMBER}.zip",
                                        "target": "./${env.DIRECTORY}/${env.BAMS_PACKAGE}-${env.VERSIONNUMBER}.zip",
                                        "flat": true
                                    },
									{
                                        "pattern": "${env.BAMS_DIRECTORY}-${env.VERSIONNUMBER}/${env.RDP_PACKAGE}-${env.VERSIONNUMBER}.zip",
                                        "target": "./${env.RDP_PACKAGE}-${env.VERSIONNUMBER}.zip",
                                        "flat": true
                                    },
                                    {
                                        "pattern": "${env.BAMS_DIRECTORY}-${env.VERSIONNUMBER}/${env.BAMS_PACKAGE}-${env.VERSIONNUMBER}-terraform.zip",
                                        "target": "./terraform.zip",
                                        "flat": true
                                    }
                                ]
                        }"""
                )
                unzip zipFile: "terraform.zip", dir: "${env.DIRECTORY}/terraform"
				unzip zipFile: "${env.RDP_PACKAGE}-${env.VERSIONNUMBER}.zip", dir: "${env.DIRECTORY}/RDP"
				zip zipFile: "${env.DIRECTORY}/RDP/iac.zip", dir: "${env.DIRECTORY}/RDP", archive: false
            }
        }
        stage("Run AWS Deployment") {
			steps{
				sh "echo \"Entering build phase..\""
				withAWS(
					role: "arn:aws:iam::898084984877:role/human-role/a206104-Developer",
					region: "us-east-1"
				) {
					sh '''
						if expr "$FIRST_DEPLOYMENT" == "TRUE" >/dev/null; then
						  echo "first deployment"
						else
						  old_vers=`aws lambda get-function --function-name ${LAMBDA_NAME}-${LAMBDA_ENV} --qualifier current_version`
						  export OLD_VERSION=`echo $old_vers | jq -r \'.Configuration.Environment.Variables.Version\'`
						fi
						echo $OLD_VERSION > oldversion.txt
						cd ${FILENAME}-$VERSIONNUMBER
						cd terraform/${TERRAFORM}
						/var/lib/jenkins/.tfenv/versions/0.12.12/terraform init -backend-config="../environments/${ENVIRONMENT}/region/${REGION}/infra-backend.tfvars"
						/var/lib/jenkins/.tfenv/versions/0.12.12/terraform plan -var-file="../environments/${ENVIRONMENT}/region/${REGION}/infra-env.tfvars" -var app_version_number=${VERSIONNUMBER}
						/var/lib/jenkins/.tfenv/versions/0.12.12/terraform apply -auto-approve -var-file=\"../environments/${ENVIRONMENT}/region/${REGION}/infra-env.tfvars\" -var app_version_number=${VERSIONNUMBER}
						/var/lib/jenkins/.tfenv/versions/0.12.12/terraform output
						cd ../../RDP
						IACPATH=`realpath iac.zip`
						/var/lib/jenkins/tools/jenkins.plugins.nodejs.tools.NodeJSInstallation/NodeJS_13.6/lib/node_modules/newman/bin/newman.js run "RDP Deployment.postman_collection.json" -e "RDP Deployment.postman_environment.json" --env-var DeploymentEnvironment=Production --env-var FileLocation=${IACPATH} --reporters json,cli
                    '''
				}
            }
        }
    }
}